
-- ✅ Check for NULLs or duplicate Primary Keys (Expectation: No Results)
SELECT 
    cst_id,
    COUNT(*)
FROM bronze.crm_cust_info
GROUP BY cst_id
HAVING COUNT(*) > 1 OR cst_id IS NULL;


-- ✅ Insert clean & standardized data into silver layer
INSERT INTO silver.crm_cust_info (
    cst_id,
    cst_key,
    cst_firsname,
    cst_lastname,
    cst_material_status,
    cst_gndr,
    cst_create_date
)
SELECT 
    cst_id,
    cst_key,
    TRIM(cst_firsname) AS cst_firstname,
    TRIM(cst_lastname) AS cst_lastname,
    CASE 
        WHEN UPPER(TRIM(cst_material_status)) = 'S' THEN 'Single'
        WHEN UPPER(TRIM(cst_material_status)) = 'M' THEN 'Married'
        ELSE 'n/a'
    END AS cst_material_status,
    CASE 
        WHEN UPPER(TRIM(cst_gndr)) = 'F' THEN 'Female'
        WHEN UPPER(TRIM(cst_gndr)) = 'M' THEN 'Male'
        ELSE 'n/a'
    END AS cst_gndr,
    cst_create_date
FROM (
    SELECT *,
           ROW_NUMBER() OVER (PARTITION BY cst_id ORDER BY cst_create_date DESC) AS flag_last
    FROM bronze.crm_cust_info
    WHERE cst_id IS NOT NULL
) t
WHERE flag_last = 1;


-- ✅ Check for unwanted spaces in first names (Expectation: No Results)
SELECT cst_firsname
FROM silver.crm_cust_info
WHERE cst_firsname != TRIM(cst_firsname);


-- ✅ Check standardized gender values
SELECT DISTINCT cst_gndr
FROM silver.crm_cust_info;
