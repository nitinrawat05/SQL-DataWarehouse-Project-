-- ✅ Check for NULLs or duplicates in Primary Key (Expectation: No Results)
SELECT 
    prd_id,
    COUNT(*)
FROM bronze.crm_prd_info
GROUP BY prd_id
HAVING COUNT(*) > 1 OR prd_id IS NULL;


-- ✅ Check for unwanted spaces in product names (Expectation: No Results)
SELECT prd_nm
FROM bronze.crm_prd_info
WHERE prd_nm != TRIM(prd_nm);


-- ✅ Validate product costs: must be non-negative and not null (Expectation: No Results)
SELECT prd_cost
FROM silver.crm_prd_info
WHERE prd_cost < 0 OR prd_cost IS NULL;


-- ✅ Check for inconsistent or unexpected product lines
SELECT DISTINCT prd_line
FROM bronze.crm_prd_info;


-- ✅ Validate date logic: end date should not be before start date (Expectation: No Results)
SELECT * 
FROM bronze.crm_prd_info
WHERE prd_end_dt < prd_start_dt;


-- ====================================================
-- ✅ Recreate the silver table if it already exists
IF OBJECT_ID('silver.crm_prd_info', 'U') IS NOT NULL
    DROP TABLE silver.crm_prd_info;

-- ✅ Create the cleaned and structured silver layer table
CREATE TABLE silver.crm_prd_info (
    prd_id INT,
    cat_id NVARCHAR(50),
    prd_key NVARCHAR(50),
    prd_nm NVARCHAR(50),
    prd_cost INT,
    prd_line NVARCHAR(50),
    prd_start_dt DATE,
    prd_end_dt DATE,
    dwh_create_date DATETIME2 DEFAULT GETDATE()
);


-- ✅ Insert clean and standardized records into silver layer
INSERT INTO silver.crm_prd_info (
    prd_id,
    cat_id,
    prd_key,
    prd_nm,
    prd_cost,
    prd_line,
    prd_start_dt,
    prd_end_dt
)
SELECT 
    prd_id,
    REPLACE(SUBSTRING(prd_key, 1, 5), '-', '_') AS cat_id,  -- Extract and format category ID
    SUBSTRING(prd_key, 7, LEN(prd_key)) AS prd_key,         -- Extract actual product key
    prd_nm,
    ISNULL(prd_cost, 0) AS prd_cost,                        -- Replace NULL costs with 0
    CASE 
        WHEN UPPER(TRIM(prd_line)) = 'M' THEN 'Mountain'
        WHEN UPPER(TRIM(prd_line)) = 'R' THEN 'Road'
        WHEN UPPER(TRIM(prd_line)) = 'S' THEN 'Other Sales'
        WHEN UPPER(TRIM(prd_line)) = 'T' THEN 'Touring'
        ELSE 'n/a'
    END AS prd_line,
    CAST(prd_start_dt AS DATE) AS prd_start_dt,
    CAST(LEAD(prd_start_dt) OVER (PARTITION BY prd_key ORDER BY prd_start_dt) - 1 AS DATE) AS prd_end_dt
FROM DataWarehouse.bronze.crm_prd_info;


-- ✅ Final verification: view loaded silver table
SELECT * 
FROM silver.crm_prd_info;
